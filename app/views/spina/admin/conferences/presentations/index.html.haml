- content_for(:header_actions) do
  %label.button{ for: 'file' }
    = icon('cog')
    = t('spina.conferences.presentations.import')
    = form_with url: import_admin_conferences_presentations_path do |f|
      = f.submit style: 'display: none'
      = f.file_field :file, multiple: false, style: 'display: none'
  %span{ data: { dropdown: true } }
    = link_to spina.new_admin_conferences_presentation_path(params: { institution: Spina::Conferences::Conference.first || nil }), class: 'button button-primary', style: 'margin-right: 0', data: { trigger: ('dropdown' if Spina::Conferences::Conference.many?), target: '#create_conference_dropdown' } do
      = icon('plus')
      = t('spina.conferences.presentations.new')

    .sliding-dropdown#create_conference_dropdown.align-right
      .slide{ class: :active, data: { controller: 'presentation-presentation-types presentation-room-uses', 'presentation-presentation-types': { url: "`#{admin_conferences_conference_presentation_types_path('${id}')}`" }, 'presentation-room-uses': { url: "`#{admin_conferences_presentation_type_room_uses_path('${id}')}`" } } }
        = form_for [:admin_conferences, Spina::Conferences::Presentation.new], url: spina.new_admin_conferences_presentation_path, method: :get do |f|
          .form-group
            .form-label
              = Spina::Conferences::Presentation.human_attribute_name :conference
            .form-control
              .select-dropdown
                = select_tag :conference_id, options_from_collection_for_select(Spina::Conferences::Conference.sorted, :id, :name), data: { action: 'presentation-presentation-types#updateOptions', target: 'presentation-presentation-types.inputId' }
          .form-group
            .form-label
              = Spina::Conferences::Presentation.human_attribute_name :presentation_type
            .form-control
              .select-dropdown
                = select_tag :presentation_type_id, options_from_collection_for_select(Spina::Conferences::Conference.sorted.first.presentation_types, :id, :name), data: { action: 'presentation-room-uses#updateOptions', target: 'presentation-room-uses.inputId presentation-presentation-types.outputOptions' }
          .form-group
            .form-label
              = Spina::Conferences::Presentation.human_attribute_name :room_use
            .form-control
              .select-dropdown
                = f.collection_select :room_use_id, Spina::Conferences::Conference.sorted.first.presentation_types.first.room_uses, :id, :room_name, {}, { data: { target: 'presentation-room-uses.outputOptions' } }
          = f.submit t('spina.conferences.presentations.new'), class: 'button button-primary'

.well
  .table-container
    %table.table
      %thead
        %tr
          %th= Spina::Conferences::Presentation.human_attribute_name :conference
          %th= Spina::Conferences::Presentation.human_attribute_name :title
          %th= Spina::Conferences::Presentation.human_attribute_name :presenters
          %th

      %tbody
        - if @presentations.any?
          = render partial: 'spina/admin/conferences/shared/presentation', collection: @presentations

        - else
          %tr
            %td.align-center{ colspan: 100 }
              %em= t('spina.conferences.presentations.no_presentations')
